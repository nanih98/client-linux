#!/usr/bin/python3

from base64 import encode
import sys
from importlib_metadata import version
from itsdangerous import base64_decode
import requests
import json
import re
import os
import subprocess

from colorama import init
init(strip=not sys.stdout.isatty()) # strip colors if stdout is redirected
from termcolor import cprint 
from pyfiglet import figlet_format

version="Beta release 1.0"
cprint(figlet_format('VPNroulette', font='smslant'), 'green')
print(version+"\n")
global file 
global os_detected

file = os.path.expanduser('~/.vpnr-client/tunnel.ovpn')
config_dir = os.path.expanduser('~/.vpnr-client')

# country_codes = ["ES","US","UK","DE","FR","IT","NL","BE","SE","NO","DK","FI","PL","CZ","AT"]
country_codes = ["XX"]

# detect operating system
def detect_os():
    if sys.platform.startswith('linux'):
        os_detected = 'linux'
        return 'linux'
    elif sys.platform.startswith('win32'):
        print(bcolors.FAIL + ">> " + bcolors.ENDC + "Windows is not supported yet")
        return 'windows'
        
    elif sys.platform.startswith('darwin'):
        return 'mac'
    else:
        print(bcolors.FAIL + ">> " + bcolors.ENDC + "Your OS is not supported")
        return 'unknown'

os_detected = detect_os()

# show country list for user to select one
def show_country_list(country_codes):

    if country_codes == ["XX"]:
        print(bcolors.OKGREEN + ">> " + bcolors.HEADER + "Random country mode is enabled (Subscribe to get access to all countries - https://vpnroulette.com/subscribe)")
        
    else:

        for i, country in enumerate(country_codes):

            # print countries in 3 aligned columns with numbers
            index_num = i + 1
            if i % 3 == 0:
                print("")
            print(bcolors.OKBLUE + str(index_num)+'. ' + bcolors.OKGREEN + country + bcolors.ENDC, end="   ")
            
        print("")
        # read selected country
        country = input(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "Select country: " + bcolors.ENDC)
        # associate selected number with country code
        country_code = country_codes[int(country)-1]
        print(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "You selected: " + bcolors.ENDC + country_code)
        return country_code
    
    

# function ask user for access credentials
def ask_credentials():

    # if credentials file exists, read them
    if os.path.isfile(os.path.expanduser('~/.vpnr-client/config')):
        with open(os.path.expanduser('~/.vpnr-client/config'), 'r') as f:
            config = json.load(f)
            vpnrusermail = config['username']
            vpnruserpasswd = config['password']
            login(vpnrusermail, vpnruserpasswd)
            
    else:
        # ask user for credentials
        print(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "Please enter your credentials:" + bcolors.ENDC)
        vpnrusermail = input(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "Email: " + bcolors.ENDC)
        vpnruserpasswd = input(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "Password: " + bcolors.ENDC)

        # if config directory doesn't exist, create it
        if not os.path.exists(config_dir):
            os.makedirs(config_dir)

        # save credentials in json in file ~/.vpnr-client/token
        with open(os.path.expanduser('~/.vpnr-client/config'), 'w') as f:
            json.dump({'username': vpnrusermail, 'password': vpnruserpasswd}, f)

        login(vpnrusermail, vpnruserpasswd)

# functio to check if dependencies are installed
def check_dependencies():
    try:
        import requests
        import json
        import re
        import colorama
        import pyfiglet
        import termcolor
    except ImportError:
        print(bcolors.FAIL + ">> " + bcolors.ENDC + "Please install the following dependencies:")
        print(bcolors.FAIL + ">> " + bcolors.ENDC + "pip3 install requests")
        print(bcolors.FAIL + ">> " + bcolors.ENDC + "pip3 install json")
        print(bcolors.FAIL + ">> " + bcolors.ENDC + "pip3 install re")
        print(bcolors.FAIL + ">> " + bcolors.ENDC + "pip3 install colorama")
        print(bcolors.FAIL + ">> " + bcolors.ENDC + "pip3 install pyfiglet")
        print(bcolors.FAIL + ">> " + bcolors.ENDC + "pip3 install termcolor")
        sys.exit(1)

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def print_banner():
    print(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "-----------------------------------------< D I S C L A I M E R >------------------------------------------" + bcolors.ENDC)
    print(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "  VPNroulette is a free VPN service that allows you to connect to any country in the world." + bcolors.ENDC)
    print(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "  This software comes without any kind of guarantee and it's going to be used under your own responsability." + bcolors.ENDC)
    print(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "  Please don't be evil, or your account will be suspended inmediately without notice" + bcolors.ENDC)
    print(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "----------------------------------------------------------------------------------------------------------" + bcolors.ENDC)
    print(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "For more information visit: https://vpnroulette.com" + bcolors.ENDC)

def login(vpnrusermail, vpnruserpasswd):

    username = vpnrusermail
    password = vpnruserpasswd
    
    if not re.match(r"[^@]+@[^@]+\.[^@]+", username):
        return 4

    if not re.match(r"^[a-zA-Z0-9_]+$", password):
        return 6

    data = {
        'username': username,
        'password': password,
    }

    r = requests.post('http://api2.vpnroulette.net:8181/auth/login?email='+username+'&password='+password, data=data)
    
    # Uncomment to debug
    # print(r.text)

    if r.status_code == 200:
        print(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "You are successfully loged in!"+ ' - [ ' + str(r.status_code) + ' ]' + bcolors.ENDC )

        # check if directory exists if not create it
        if not os.path.exists(config_dir):
            print_banner()
            os.makedirs(config_dir)

        # save token to ~/.vpnroulette/token
        with open(os.path.expanduser('~/.vpnr-client/token'), 'w') as f:
            f.write(r.text)
        return 0

    elif r.status_code == 400:
        return 2
    elif r.status_code == 401:
        return 3
    else:
        return 1


# funtion to get random tunnel
def get_tunnel(country_code):
    
        # get token from ~/.vpnroulette/token
        with open(os.path.expanduser('~/.vpnr-client/token'), 'r') as f:
            token = f.read()
    
        headers = {
            'Authorization': 'Token: ' + token,
            'Content-Type': 'application/json',
        }
    
        r = requests.get('http://api2.vpnroulette.net:8181/tunnel/random', headers=headers)
    
        # Uncomment to debug
        #print(r.text)
    
        if r.status_code == 200:
            tunnel_encoded_data = json.loads(r.text)
            tunnel_data = base64_decode(tunnel_encoded_data['content'])
            tunnel = str(tunnel_data, 'utf-8')
            # print(tunnel_data)
            # save tunnel_data to ~/.vpnroulette/tunnel.ovpn
            file = '~/.vpnr-client/tunnel.ovpn'
            with open(os.path.expanduser(file), 'w') as f:
                # replace \n with \r\n
                f.write(tunnel)

                print(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "Tunnel data saved: OK" + bcolors.ENDC )
                print(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "Tunnel data saved in: " + file + bcolors.ENDC )

                # add specific MacOS configs for openvpn to the end of the file (MacOS only)
                if sys.platform == 'darwin':
                    with open(os.path.expanduser(file), 'a') as f:
                        f.write('script-security 2\n')
                        f.write('up /usr/local/bin/update-resolv-conf\n')
                        f.write('down /usr/local/bin/update-resolv-conf\n')
                        f.write('dhcp-option DNS 8.8.8.8\n')
                        f.write('\n')                    

                    print(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "Tunnel data specific for MacOS: OK" + bcolors.ENDC )
                return file
            # print(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "Connecting to: " + bcolors.ENDC + r.json()['tunnel']['host'])
            return 0
        else:
            return 1
    

# geolocate IP address using ipinfo.io
def geolocate(ip):
    r = requests.get('http://ipinfo.io/' + ip + '/json')
    if r.status_code == 200:
        data = json.loads(r.text)
        return data['country']
    else:
        return 1


# get remote ip address from file ~/.vpnroulette/tunnel.ovpn
def get_remote_ip(file):
    # get tunnel data from ~/.vpnroulette/tunnel.ovpn
    with open(os.path.expanduser(file), 'r') as f:
        tunnel = f.read()
    # get remote ip address from tunnel data
    remote_ip = re.search(r"remote\s([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})", tunnel).group(1)
    print(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "Your new ip address: " + bcolors.ENDC + remote_ip)
    print(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "Your new country: " + bcolors.ENDC + geolocate(remote_ip))
    print(bcolors.OKBLUE + '>> '+ bcolors.OKGREEN + "Creating a VPN tunnel need root privileges, you will be prompted by sudo: " + bcolors.ENDC )
    return remote_ip


# function to run openvpn with the tunnel file
def run_openvpn(file):
    # run openvpn with tunnel file as sudo
    os.system('sudo openvpn ' + file)
    # subprocess.Popen(['openvpn', file])
    return 0



check_dependencies()
ask_credentials()
get_remote_ip(get_tunnel(show_country_list(country_codes)))
run_openvpn(file)